
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_organization_iam_binding.org_admin_delegated will be created
  + resource "google_organization_iam_binding" "org_admin_delegated" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + org_id  = "119369546298"
      + role    = "organizations/119369546298/roles/organizationIamAdmin"

      + condition {
          + description = "Automation service account delegated grants."
          + expression  = "api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', []).hasOnly(['roles/accesscontextmanager.policyAdmin','roles/compute.orgFirewallPolicyAdmin','roles/compute.xpnAdmin','roles/orgpolicy.policyAdmin','roles/resourcemanager.organizationViewer','organizations/119369546298/roles/tenantNetworkAdmin','roles/billing.admin','roles/billing.costsManager','roles/billing.user'])"
          + title       = "automation_sa_delegated_grants"
        }
    }

  # google_storage_bucket_object.providers["0-bootstrap"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "lz-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/0-bootstrap-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["0-bootstrap-tenant"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "lz-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/0-bootstrap-tenant-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["1-resman"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "lz-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/1-resman-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.tfvars will be created
  + resource "google_storage_bucket_object" "tfvars" {
      + bucket         = "lz-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "tfvars/0-bootstrap.auto.tfvars.json"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.tfvars_globals will be created
  + resource "google_storage_bucket_object" "tfvars_globals" {
      + bucket         = "lz-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "tfvars/globals.auto.tfvars.json"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # module.automation-tf-bootstrap-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "lz-prod-iac-core-bootstrap-0"
      + project                     = "lz-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "MULTI_REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.automation-tf-bootstrap-sa.google_storage_bucket_iam_member.bucket-roles["lz-prod-iac-core-outputs-0-roles/storage.admin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "lz-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:lz-prod-bootstrap-0@lz-prod-iac-core-0.iam.gserviceaccount.com"
      + role   = "roles/storage.admin"
    }

  # module.automation-tf-output-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "lz-prod-iac-core-outputs-0"
      + project                     = "lz-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "MULTI_REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.automation-tf-resman-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "EU"
      + name                        = "lz-prod-iac-core-resman-0"
      + project                     = "lz-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "MULTI_REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.automation-tf-resman-gcs.google_storage_bucket_iam_binding.bindings["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "bindings" {
      + bucket  = "lz-prod-iac-core-resman-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.automation-tf-resman-sa.google_storage_bucket_iam_member.bucket-roles["lz-prod-iac-core-outputs-0-roles/storage.admin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "lz-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com"
      + role   = "roles/storage.admin"
    }

  # module.billing-export-dataset[0].google_bigquery_dataset.default will be created
  + resource "google_bigquery_dataset" "default" {
      + creation_time              = (known after apply)
      + dataset_id                 = "billing_export"
      + delete_contents_on_destroy = false
      + description                = "Terraform managed."
      + etag                       = (known after apply)
      + friendly_name              = "Billing export."
      + id                         = (known after apply)
      + labels                     = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "EU"
      + project                    = "lz-prod-billing-exp-0"
      + self_link                  = (known after apply)

      + access {
          + domain         = (known after apply)
          + group_by_email = (known after apply)
          + role           = (known after apply)
          + special_group  = (known after apply)
          + user_by_email  = (known after apply)

          + dataset {
              + target_types = (known after apply)

              + dataset {
                  + dataset_id = (known after apply)
                  + project_id = (known after apply)
                }
            }

          + routine {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + routine_id = (known after apply)
            }

          + view {
              + dataset_id = (known after apply)
              + project_id = (known after apply)
              + table_id   = (known after apply)
            }
        }
    }

  # module.log-export-logbucket["audit-logs"].google_logging_project_bucket_config.bucket[0] will be created
  + resource "google_logging_project_bucket_config" "bucket" {
      + bucket_id       = "audit-logs-audit-logs"
      + description     = (known after apply)
      + id              = (known after apply)
      + lifecycle_state = (known after apply)
      + location        = "global"
      + name            = (known after apply)
      + project         = "lz-prod-audit-logs-0"
      + retention_days  = 30
    }

  # module.log-export-logbucket["vpc-sc"].google_logging_project_bucket_config.bucket[0] will be created
  + resource "google_logging_project_bucket_config" "bucket" {
      + bucket_id       = "audit-logs-vpc-sc"
      + description     = (known after apply)
      + id              = (known after apply)
      + lifecycle_state = (known after apply)
      + location        = "global"
      + name            = (known after apply)
      + project         = "lz-prod-audit-logs-0"
      + retention_days  = 30
    }

  # module.organization.google_logging_organization_sink.sink["audit-logs"] will be created
  + resource "google_logging_organization_sink" "sink" {
      + description      = "audit-logs (Terraform-managed)."
      + destination      = (known after apply)
      + disabled         = false
      + filter           = "logName:\"/logs/cloudaudit.googleapis.com%2Factivity\" OR logName:\"/logs/cloudaudit.googleapis.com%2Fsystem_event\""
      + id               = (known after apply)
      + include_children = true
      + name             = "audit-logs"
      + org_id           = "119369546298"
      + writer_identity  = (known after apply)

      + bigquery_options {
          + use_partitioned_tables = (known after apply)
        }
    }

  # module.organization.google_logging_organization_sink.sink["vpc-sc"] will be created
  + resource "google_logging_organization_sink" "sink" {
      + description      = "vpc-sc (Terraform-managed)."
      + destination      = (known after apply)
      + disabled         = false
      + filter           = "protoPayload.metadata.@type=\"type.googleapis.com/google.cloud.audit.VpcServiceControlAuditMetadata\""
      + id               = (known after apply)
      + include_children = true
      + name             = "vpc-sc"
      + org_id           = "119369546298"
      + writer_identity  = (known after apply)

      + bigquery_options {
          + use_partitioned_tables = (known after apply)
        }
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/browser"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "domain:wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/browser"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/cloudasset.owner"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/cloudasset.owner"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/cloudsupport.techSupportEditor"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
          + "group:gcp-devops@wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/cloudsupport.techSupportEditor"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/iam.securityReviewer"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/iam.securityReviewer"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
          + "serviceAccount:lz-prod-bootstrap-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
          + "user:sowndharya@wetranscloud.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/logging.admin"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/logging.viewer"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-devops@wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/logging.viewer"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/monitoring.viewer"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-devops@wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/monitoring.viewer"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "user:sowndharya@wetranscloud.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/owner"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-bootstrap-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
          + "user:sowndharya@wetranscloud.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/resourcemanager.projectMover"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-bootstrap-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/resourcemanager.projectMover"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/resourcemanager.tagAdmin"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/resourcemanager.tagAdmin"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/resourcemanager.tagUser"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:lz-prod-resman-0@lz-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + org_id  = "119369546298"
      + role    = "roles/resourcemanager.tagUser"
    }

  # module.organization.google_organization_iam_binding.authoritative["roles/securitycenter.admin"] will be created
  + resource "google_organization_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
        ]
      + org_id  = "119369546298"
      + role    = "roles/securitycenter.admin"
    }

  # module.organization.google_project_iam_member.bucket-sinks-binding["audit-logs"] will be created
  + resource "google_project_iam_member" "bucket-sinks-binding" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = (known after apply)
      + role    = "roles/logging.bucketWriter"

      + condition {
          + description = (known after apply)
          + expression  = (known after apply)
          + title       = "audit-logs bucket writer"
        }
    }

  # module.organization.google_project_iam_member.bucket-sinks-binding["vpc-sc"] will be created
  + resource "google_project_iam_member" "bucket-sinks-binding" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = (known after apply)
      + role    = "roles/logging.bucketWriter"

      + condition {
          + description = (known after apply)
          + expression  = (known after apply)
          + title       = "vpc-sc bucket writer"
        }
    }

Plan: 33 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + automation      = {
      + federated_identity_pool      = null
      + federated_identity_providers = {}
      + outputs_bucket               = "lz-prod-iac-core-outputs-0"
      + project_id                   = "lz-prod-iac-core-0"
      + project_number               = "387521916170"
    }
  + billing_dataset = (known after apply)
  + tfvars          = (sensitive value)
