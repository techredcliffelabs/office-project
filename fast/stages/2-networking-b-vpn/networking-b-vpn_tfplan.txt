
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_monitoring_dashboard.dashboard["firewall_insights.json"] will be created
  + resource "google_monitoring_dashboard" "dashboard" {
      + dashboard_json = jsonencode(
            {
              + displayName = "Firewall Insights Monitoring"
              + gridLayout  = {
                  + columns = "2"
                  + widgets = [
                      + {
                          + title   = "Subnet Firewall Hit Counts"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"firewallinsights.googleapis.com/subnet/firewall_hit_count\" resource.type=\"gce_subnetwork\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "VM Firewall Hit Counts"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"firewallinsights.googleapis.com/vm/firewall_hit_count\" resource.type=\"gce_instance\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                    ]
                }
            }
        )
      + id             = (known after apply)
      + project        = "lz-prod-net-landing-0"
    }

  # google_monitoring_dashboard.dashboard["vpn.json"] will be created
  + resource "google_monitoring_dashboard" "dashboard" {
      + dashboard_json = jsonencode(
            {
              + displayName = "VPN Monitoring"
              + gridLayout  = {
                  + columns = "2"
                  + widgets = [
                      + {
                          + title   = "Number of connections"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_MEAN"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/gateway/connections\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Tunnel established"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_MEAN"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/tunnel_established\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Cloud VPN Gateway - Received bytes"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/network/received_bytes_count\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "By"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Cloud VPN Gateway - Sent bytes"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/network/sent_bytes_count\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "By"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Cloud VPN Gateway - Received packets"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/network/received_packets_count\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "{packets}"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Cloud VPN Gateway - Sent packets"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/network/sent_packets_count\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "{packets}"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Incoming packets dropped"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/network/dropped_received_packets_count\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                      + {
                          + title   = "Outgoing packets dropped"
                          + xyChart = {
                              + chartOptions      = {
                                  + mode = "COLOR"
                                }
                              + dataSets          = [
                                  + {
                                      + minAlignmentPeriod = "60s"
                                      + plotType           = "LINE"
                                      + targetAxis         = "Y1"
                                      + timeSeriesQuery    = {
                                          + timeSeriesFilter = {
                                              + aggregation          = {
                                                  + perSeriesAligner = "ALIGN_RATE"
                                                }
                                              + filter               = "metric.type=\"vpn.googleapis.com/network/dropped_sent_packets_count\" resource.type=\"vpn_gateway\""
                                              + secondaryAggregation = {}
                                            }
                                          + unitOverride     = "1"
                                        }
                                    },
                                ]
                              + timeshiftDuration = "0s"
                              + yAxis             = {
                                  + label = "y1Axis"
                                  + scale = "LINEAR"
                                }
                            }
                        },
                    ]
                }
            }
        )
      + id             = (known after apply)
      + project        = "lz-prod-net-landing-0"
    }

  # google_project_iam_binding.dev_spoke_project_iam_delegated will be created
  + resource "google_project_iam_binding" "dev_spoke_project_iam_delegated" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "lz-dev-net-spoke-0"
      + role    = "roles/resourcemanager.projectIamAdmin"

      + condition {
          + description = "Development host project delegated grants."
          + expression  = "api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', []).hasOnly(['roles/composer.sharedVpcAgent','roles/compute.networkUser','roles/compute.networkViewer','roles/container.hostServiceAgentUser','roles/multiclusterservicediscovery.serviceAgent','roles/vpcaccess.user'])"
          + title       = "dev_stage3_sa_delegated_grants"
        }
    }

  # google_project_iam_binding.prod_spoke_project_iam_delegated will be created
  + resource "google_project_iam_binding" "prod_spoke_project_iam_delegated" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "lz-prod-net-spoke-0"
      + role    = "roles/resourcemanager.projectIamAdmin"

      + condition {
          + description = "Production host project delegated grants."
          + expression  = "api.getAttribute('iam.googleapis.com/modifiedGrantsByRole', []).hasOnly(['roles/composer.sharedVpcAgent','roles/compute.networkUser','roles/compute.networkViewer','roles/container.hostServiceAgentUser','roles/multiclusterservicediscovery.serviceAgent','roles/vpcaccess.user'])"
          + title       = "prod_stage3_sa_delegated_grants"
        }
    }

  # google_storage_bucket_object.tfvars will be created
  + resource "google_storage_bucket_object" "tfvars" {
      + bucket         = "lz-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "tfvars/2-networking.auto.tfvars.json"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # module.dev-dns-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "dev.gcp.example.com."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "dev-gcp-example-com"
      + name_servers    = (known after apply)
      + project         = "lz-dev-net-spoke-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.dev-dns-private-zone.google_dns_record_set.cloud-static-records["A localhost"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "dev-gcp-example-com"
      + name         = "localhost.dev.gcp.example.com."
      + project      = "lz-dev-net-spoke-0"
      + rrdatas      = [
          + "127.0.0.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.dev-landing-root-dns-peering.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "dev-root-dns-peering"
      + name_servers    = (known after apply)
      + project         = "lz-dev-net-spoke-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + peering_config {
          + target_network {
              + network_url = (known after apply)
            }
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.dev-reverse-10-dns-peering.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "10.in-addr.arpa."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "dev-reverse-10-dns-peering"
      + name_servers    = (known after apply)
      + project         = "lz-dev-net-spoke-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + peering_config {
          + target_network {
              + network_url = (known after apply)
            }
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.dev-spoke-cloudnat["us-east1"].google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-nat-ue1-nat"
      + network            = (known after apply)
      + project            = "lz-dev-net-spoke-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + asn                = 4200001024
          + keepalive_interval = 20
        }
    }

  # module.dev-spoke-cloudnat["us-east1"].google_compute_router_nat.nat will be created
  + resource "google_compute_router_nat" "nat" {
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = true
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = 64
      + name                                = "dev-nat-ue1"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + project                             = "lz-dev-net-spoke-0"
      + region                              = "us-east1"
      + router                              = "dev-nat-ue1-nat"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = true
          + filter = "ERRORS_ONLY"
        }
    }

  # module.dev-spoke-firewall.google_compute_firewall.custom-rules["ingress-allow-composer-nodes"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Allow traffic to Composer nodes."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-allow-composer-nodes"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "lz-dev-net-spoke-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + source_tags        = [
          + "composer-worker",
        ]
      + target_tags        = [
          + "composer-worker",
        ]

      + allow {
          + ports    = [
              + "80",
              + "443",
              + "3306",
              + "3307",
            ]
          + protocol = "tcp"
        }
    }

  # module.dev-spoke-firewall.google_compute_firewall.custom-rules["ingress-allow-dataflow-load"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Allow traffic to Dataflow nodes."
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "ingress-allow-dataflow-load"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "lz-dev-net-spoke-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "0.0.0.0/0",
        ]
      + source_tags        = [
          + "dataflow",
        ]
      + target_tags        = [
          + "dataflow",
        ]

      + allow {
          + ports    = [
              + "12345",
              + "12346",
            ]
          + protocol = "tcp"
        }
    }

  # module.dev-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "lz-dev-net-spoke-0"
    }

  # module.dev-spoke-project.google_monitoring_monitored_project.primary["lz-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "lz-prod-net-landing-0"
      + name          = "lz-dev-net-spoke-0"
    }

  # module.dev-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "013816-12836E-7ECD57"
      + folder_id           = "558096339299"
      + id                  = (known after apply)
      + name                = "lz-dev-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "lz-dev-net-spoke-0"
      + skip_delete         = false
    }

  # module.dev-spoke-project.google_project_iam_binding.authoritative["roles/dns.admin"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "lz-dev-net-spoke-0"
      + role    = "roles/dns.admin"
    }

  # module.dev-spoke-project.google_project_iam_member.servicenetworking[0] will be created
  + resource "google_project_iam_member" "servicenetworking" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "lz-dev-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.dev-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.dev-spoke-project.google_project_service_identity.servicenetworking[0] will be created
  + resource "google_project_service_identity" "servicenetworking" {
      + email   = (known after apply)
      + id      = (known after apply)
      + project = "lz-dev-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.dev-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks         = false
      + delete_default_routes_on_create = false
      + description                     = "Terraform-managed."
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + internal_ipv6_range             = (known after apply)
      + mtu                             = 1500
      + name                            = "dev-spoke-0"
      + project                         = "lz-dev-net-spoke-0"
      + routing_mode                    = "GLOBAL"
      + self_link                       = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + description            = "Terraform-managed."
      + dest_range             = "199.36.153.8/30"
      + id                     = (known after apply)
      + name                   = "dev-spoke-0-private-googleapis"
      + network                = (known after apply)
      + next_hop_gateway       = "default-internet-gateway"
      + next_hop_instance_zone = (known after apply)
      + next_hop_ip            = (known after apply)
      + next_hop_network       = (known after apply)
      + priority               = 1000
      + project                = "lz-dev-net-spoke-0"
      + self_link              = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + description            = "Terraform-managed."
      + dest_range             = "199.36.153.4/30"
      + id                     = (known after apply)
      + name                   = "dev-spoke-0-restricted-googleapis"
      + network                = (known after apply)
      + next_hop_gateway       = "default-internet-gateway"
      + next_hop_instance_zone = (known after apply)
      + next_hop_ip            = (known after apply)
      + next_hop_network       = (known after apply)
      + priority               = 1000
      + project                = "lz-dev-net-spoke-0"
      + self_link              = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_subnetwork.proxy_only["us-east1/dev-l7ilb-ue1"] will be created
  + resource "google_compute_subnetwork" "proxy_only" {
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed proxy-only subnet for Regional HTTPS or Internal HTTPS LB."
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.60.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "dev-l7ilb-ue1"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + purpose                    = "REGIONAL_MANAGED_PROXY"
      + region                     = "us-east1"
      + role                       = "ACTIVE"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_subnetwork.proxy_only["us-west1/dev-l7ilb-uw1"] will be created
  + resource "google_compute_subnetwork" "proxy_only" {
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed proxy-only subnet for Regional HTTPS or Internal HTTPS LB."
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.61.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "dev-l7ilb-uw1"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + purpose                    = "REGIONAL_MANAGED_PROXY"
      + region                     = "us-west1"
      + role                       = "ACTIVE"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_subnetwork.subnetwork["us-east1/dev-dataplatform-ew1"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + description                = "Default subnet for dev Data Platform"
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.48.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "dev-dataplatform-ew1"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + purpose                    = (known after apply)
      + region                     = "us-east1"
      + secondary_ip_range         = []
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_subnetwork.subnetwork["us-east1/dev-default-ew1"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + description                = "Default subnet for dev"
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.32.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "dev-default-ew1"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + purpose                    = (known after apply)
      + region                     = "us-east1"
      + secondary_ip_range         = []
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.dev-spoke-vpc.google_compute_subnetwork.subnetwork["us-east1/dev-gke-nodes-ew1"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + description                = "Default subnet for prod gke nodes"
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.64.0.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "dev-gke-nodes-ew1"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-dev-net-spoke-0"
      + purpose                    = (known after apply)
      + region                     = "us-east1"
      + secondary_ip_range         = []
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.dev-to-landing-primary-vpn.google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-landing-ue1"
      + network   = (known after apply)
      + project   = "lz-dev-net-spoke-0"
      + region    = "us-east1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.dev-to-landing-primary-vpn.google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "dev-spoke-vpn-ue1"
      + network            = (known after apply)
      + project            = "lz-dev-net-spoke-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + advertised_groups  = []
          + asn                = 64513
          + keepalive_interval = 20
        }
    }

  # module.dev-to-landing-primary-vpn.google_compute_router_interface.router_interface["0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.1/30"
      + name                = "vpn-to-landing-ue1-0"
      + project             = "lz-dev-net-spoke-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "dev-spoke-vpn-ue1"
      + vpn_tunnel          = "vpn-to-landing-ue1-0"
    }

  # module.dev-to-landing-primary-vpn.google_compute_router_interface.router_interface["1"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.5/30"
      + name                = "vpn-to-landing-ue1-1"
      + project             = "lz-dev-net-spoke-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "dev-spoke-vpn-ue1"
      + vpn_tunnel          = "vpn-to-landing-ue1-1"
    }

  # module.dev-to-landing-primary-vpn.google_compute_router_peer.bgp_peer["0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-landing-ue1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-landing-ue1-0"
      + peer_asn                  = 64512
      + peer_ip_address           = "169.254.0.2"
      + project                   = "lz-dev-net-spoke-0"
      + region                    = "us-east1"
      + router                    = "dev-spoke-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.dev-to-landing-primary-vpn.google_compute_router_peer.bgp_peer["1"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-landing-ue1-1"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-landing-ue1-1"
      + peer_asn                  = 64512
      + peer_ip_address           = "169.254.0.6"
      + project                   = "lz-dev-net-spoke-0"
      + region                    = "us-east1"
      + router                    = "dev-spoke-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.dev-to-landing-primary-vpn.google_compute_vpn_tunnel.tunnels["0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-landing-ue1-0"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-dev-net-spoke-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "dev-spoke-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 0
    }

  # module.dev-to-landing-primary-vpn.google_compute_vpn_tunnel.tunnels["1"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-landing-ue1-1"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-dev-net-spoke-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "dev-spoke-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 1
    }

  # module.dev-to-landing-primary-vpn.random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.folder.google_compute_firewall_policy.policy["factory"] will be created
  + resource "google_compute_firewall_policy" "policy" {
      + creation_timestamp = (known after apply)
      + fingerprint        = (known after apply)
      + firewall_policy_id = (known after apply)
      + id                 = (known after apply)
      + name               = (known after apply)
      + parent             = "folders/895710653518"
      + rule_tuple_count   = (known after apply)
      + self_link          = (known after apply)
      + self_link_with_id  = (known after apply)
      + short_name         = "factory"
    }

  # module.folder.google_compute_firewall_policy_association.association["factory-policy"] will be created
  + resource "google_compute_firewall_policy_association" "association" {
      + attachment_target = "folders/895710653518"
      + firewall_policy   = (known after apply)
      + id                = (known after apply)
      + name              = "folders-895710653518"
      + short_name        = (known after apply)
    }

  # module.folder.google_compute_firewall_policy_rule.rule["factory-allow-admins"] will be created
  + resource "google_compute_firewall_policy_rule" "rule" {
      + action           = "allow"
      + description      = "Access from the admin subnet to all subnets"
      + direction        = "INGRESS"
      + firewall_policy  = (known after apply)
      + id               = (known after apply)
      + kind             = (known after apply)
      + priority         = 1000
      + rule_tuple_count = (known after apply)

      + match {
          + src_ip_ranges = [
              + "10.0.0.0/8",
              + "172.16.0.0/12",
              + "192.168.0.0/16",
            ]

          + layer4_configs {
              + ip_protocol = "all"
              + ports       = []
            }
        }
    }

  # module.folder.google_compute_firewall_policy_rule.rule["factory-allow-healthchecks"] will be created
  + resource "google_compute_firewall_policy_rule" "rule" {
      + action           = "allow"
      + description      = "Enable HTTP and HTTPS healthchecks"
      + direction        = "INGRESS"
      + firewall_policy  = (known after apply)
      + id               = (known after apply)
      + kind             = (known after apply)
      + priority         = 1001
      + rule_tuple_count = (known after apply)

      + match {
          + src_ip_ranges = [
              + "35.191.0.0/16",
              + "130.211.0.0/22",
              + "209.85.152.0/22",
              + "209.85.204.0/22",
            ]

          + layer4_configs {
              + ip_protocol = "tcp"
              + ports       = [
                  + "80",
                  + "443",
                ]
            }
        }
    }

  # module.folder.google_compute_firewall_policy_rule.rule["factory-allow-icmp"] will be created
  + resource "google_compute_firewall_policy_rule" "rule" {
      + action           = "allow"
      + description      = "Enable ICMP"
      + direction        = "INGRESS"
      + firewall_policy  = (known after apply)
      + id               = (known after apply)
      + kind             = (known after apply)
      + priority         = 1003
      + rule_tuple_count = (known after apply)

      + match {
          + src_ip_ranges = [
              + "0.0.0.0/0",
            ]

          + layer4_configs {
              + ip_protocol = "icmp"
              + ports       = []
            }
        }
    }

  # module.folder.google_compute_firewall_policy_rule.rule["factory-allow-ssh-from-iap"] will be created
  + resource "google_compute_firewall_policy_rule" "rule" {
      + action           = "allow"
      + description      = "Enable SSH from IAP"
      + direction        = "INGRESS"
      + firewall_policy  = (known after apply)
      + id               = (known after apply)
      + kind             = (known after apply)
      + priority         = 1002
      + rule_tuple_count = (known after apply)

      + match {
          + src_ip_ranges = [
              + "35.235.240.0/20",
            ]

          + layer4_configs {
              + ip_protocol = "tcp"
              + ports       = [
                  + "22",
                ]
            }
        }
    }

  # module.gcp-example-dns-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "gcp.example.com."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "gcp-example-com"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.gcp-example-dns-private-zone.google_dns_record_set.cloud-static-records["A localhost"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "gcp-example-com"
      + name         = "localhost.gcp.example.com."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "127.0.0.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.gcrio-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "gcr.io."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "gcr-io"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.gcrio-private-zone.google_dns_record_set.cloud-static-records["A gcr.io."] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "gcr-io"
      + name         = "gcr.io."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "199.36.153.8",
          + "199.36.153.9",
          + "199.36.153.10",
          + "199.36.153.11",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.gcrio-private-zone.google_dns_record_set.cloud-static-records["CNAME *"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "gcr-io"
      + name         = "*.gcr.io."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "private.googleapis.com.",
        ]
      + ttl          = 300
      + type         = "CNAME"
    }

  # module.googleapis-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "googleapis.com."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "googleapis-com"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.googleapis-private-zone.google_dns_record_set.cloud-static-records["A private"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "googleapis-com"
      + name         = "private.googleapis.com."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "199.36.153.8",
          + "199.36.153.9",
          + "199.36.153.10",
          + "199.36.153.11",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.googleapis-private-zone.google_dns_record_set.cloud-static-records["A restricted"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "googleapis-com"
      + name         = "restricted.googleapis.com."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "199.36.153.4",
          + "199.36.153.5",
          + "199.36.153.6",
          + "199.36.153.7",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.googleapis-private-zone.google_dns_record_set.cloud-static-records["CNAME *"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "googleapis-com"
      + name         = "*.googleapis.com."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "private.googleapis.com.",
        ]
      + ttl          = 300
      + type         = "CNAME"
    }

  # module.landing-firewall.google_compute_firewall.custom-rules["allow-onprem-probes-example"] will be created
  + resource "google_compute_firewall" "custom-rules" {
      + creation_timestamp = (known after apply)
      + description        = "Allow traffic from onprem probes"
      + destination_ranges = (known after apply)
      + direction          = "INGRESS"
      + disabled           = false
      + enable_logging     = (known after apply)
      + id                 = (known after apply)
      + name               = "allow-onprem-probes-example"
      + network            = (known after apply)
      + priority           = 1000
      + project            = "lz-prod-net-landing-0"
      + self_link          = (known after apply)
      + source_ranges      = [
          + "10.255.255.254/32",
        ]

      + allow {
          + ports    = [
              + "12345",
            ]
          + protocol = "tcp"
        }
    }

  # module.landing-nat-primary.google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "prod-nat-ue1"
      + network            = (known after apply)
      + project            = "lz-prod-net-landing-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + asn                = 4200001024
          + keepalive_interval = 20
        }
    }

  # module.landing-nat-primary.google_compute_router_nat.nat will be created
  + resource "google_compute_router_nat" "nat" {
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = true
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = 64
      + name                                = "ue1"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + project                             = "lz-prod-net-landing-0"
      + region                              = "us-east1"
      + router                              = "prod-nat-ue1"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = false
          + filter = "ALL"
        }
    }

  # module.landing-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "lz-prod-net-landing-0"
    }

  # module.landing-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "013816-12836E-7ECD57"
      + folder_id           = "265599683988"
      + id                  = (known after apply)
      + name                = "lz-prod-net-landing-0"
      + number              = (known after apply)
      + project_id          = "lz-prod-net-landing-0"
      + skip_delete         = false
    }

  # module.landing-project.google_project_iam_binding.authoritative["organizations/119369546298/roles/serviceProjectNetworkAdmin"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "lz-prod-net-landing-0"
      + role    = "organizations/119369546298/roles/serviceProjectNetworkAdmin"
    }

  # module.landing-project.google_project_iam_binding.authoritative["roles/dns.admin"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "lz-prod-net-landing-0"
      + role    = "roles/dns.admin"
    }

  # module.landing-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-landing-0"
      + service                    = "compute.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-landing-0"
      + service                    = "dns.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-landing-0"
      + service                    = "iap.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-landing-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.landing-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-landing-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.landing-to-dev-primary-vpn.google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-dev-ue1"
      + network   = (known after apply)
      + project   = "lz-prod-net-landing-0"
      + region    = "us-east1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.landing-to-dev-primary-vpn.google_compute_router_interface.router_interface["0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.2/30"
      + name                = "vpn-to-dev-ue1-0"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "landing-vpn-ue1"
      + vpn_tunnel          = "vpn-to-dev-ue1-0"
    }

  # module.landing-to-dev-primary-vpn.google_compute_router_interface.router_interface["1"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.6/30"
      + name                = "vpn-to-dev-ue1-1"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "landing-vpn-ue1"
      + vpn_tunnel          = "vpn-to-dev-ue1-1"
    }

  # module.landing-to-dev-primary-vpn.google_compute_router_peer.bgp_peer["0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-dev-ue1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-dev-ue1-0"
      + peer_asn                  = 64513
      + peer_ip_address           = "169.254.0.1"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-east1"
      + router                    = "landing-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-dev-primary-vpn.google_compute_router_peer.bgp_peer["1"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-dev-ue1-1"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-dev-ue1-1"
      + peer_asn                  = 64513
      + peer_ip_address           = "169.254.0.5"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-east1"
      + router                    = "landing-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-dev-primary-vpn.google_compute_vpn_tunnel.tunnels["0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-dev-ue1-0"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-landing-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "landing-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 0
    }

  # module.landing-to-dev-primary-vpn.google_compute_vpn_tunnel.tunnels["1"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-dev-ue1-1"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-landing-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "landing-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 1
    }

  # module.landing-to-dev-primary-vpn.random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_external_vpn_gateway.external_gateway[0] will be created
  + resource "google_compute_external_vpn_gateway" "external_gateway" {
      + description     = "Terraform managed external VPN gateway"
      + id              = (known after apply)
      + name            = "external-vpn-to-onprem-ue1"
      + project         = "lz-prod-net-landing-0"
      + redundancy_type = "SINGLE_IP_INTERNALLY_REDUNDANT"
      + self_link       = (known after apply)

      + interface {
          + id         = 0
          + ip_address = "8.8.8.8"
        }
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-onprem-ue1"
      + network   = (known after apply)
      + project   = "lz-prod-net-landing-0"
      + region    = "us-east1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "landing-onprem-vpn-ue1"
      + network            = (known after apply)
      + project            = "lz-prod-net-landing-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + advertised_groups  = []
          + asn                = 65533
          + keepalive_interval = 20
        }
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_router_interface.router_interface["remote-0-0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.1.2/30"
      + name                = "vpn-to-onprem-ue1-remote-0-0"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "landing-onprem-vpn-ue1"
      + vpn_tunnel          = "vpn-to-onprem-ue1-remote-0-0"
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_router_interface.router_interface["remote-1-0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.1.6/30"
      + name                = "vpn-to-onprem-ue1-remote-1-0"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "landing-onprem-vpn-ue1"
      + vpn_tunnel          = "vpn-to-onprem-ue1-remote-1-0"
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_router_peer.bgp_peer["remote-0-0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-onprem-ue1-remote-0-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-onprem-ue1-remote-0-0"
      + peer_asn                  = 65534
      + peer_ip_address           = "169.254.1.1"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-east1"
      + router                    = "landing-onprem-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_router_peer.bgp_peer["remote-1-0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-onprem-ue1-remote-1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-onprem-ue1-remote-1-0"
      + peer_asn                  = 65534
      + peer_ip_address           = "169.254.1.5"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-east1"
      + router                    = "landing-onprem-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_vpn_tunnel.tunnels["remote-0-0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp              = (known after apply)
      + detailed_status                 = (known after apply)
      + id                              = (known after apply)
      + ike_version                     = 2
      + local_traffic_selector          = (known after apply)
      + name                            = "vpn-to-onprem-ue1-remote-0-0"
      + peer_external_gateway           = (known after apply)
      + peer_external_gateway_interface = 0
      + peer_ip                         = (known after apply)
      + project                         = "lz-prod-net-landing-0"
      + region                          = "us-east1"
      + remote_traffic_selector         = (known after apply)
      + router                          = "landing-onprem-vpn-ue1"
      + self_link                       = (known after apply)
      + shared_secret                   = (sensitive value)
      + shared_secret_hash              = (known after apply)
      + tunnel_id                       = (known after apply)
      + vpn_gateway                     = (known after apply)
      + vpn_gateway_interface           = 0
    }

  # module.landing-to-onprem-primary-vpn[0].google_compute_vpn_tunnel.tunnels["remote-1-0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp              = (known after apply)
      + detailed_status                 = (known after apply)
      + id                              = (known after apply)
      + ike_version                     = 2
      + local_traffic_selector          = (known after apply)
      + name                            = "vpn-to-onprem-ue1-remote-1-0"
      + peer_external_gateway           = (known after apply)
      + peer_external_gateway_interface = 0
      + peer_ip                         = (known after apply)
      + project                         = "lz-prod-net-landing-0"
      + region                          = "us-east1"
      + remote_traffic_selector         = (known after apply)
      + router                          = "landing-onprem-vpn-ue1"
      + self_link                       = (known after apply)
      + shared_secret                   = (sensitive value)
      + shared_secret_hash              = (known after apply)
      + tunnel_id                       = (known after apply)
      + vpn_gateway                     = (known after apply)
      + vpn_gateway_interface           = 1
    }

  # module.landing-to-onprem-primary-vpn[0].random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.landing-to-prod-primary-vpn.google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-prod-ue1"
      + network   = (known after apply)
      + project   = "lz-prod-net-landing-0"
      + region    = "us-east1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.landing-to-prod-primary-vpn.google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "landing-vpn-ue1"
      + network            = (known after apply)
      + project            = "lz-prod-net-landing-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + advertised_groups  = []
          + asn                = 64512
          + keepalive_interval = 20
        }
    }

  # module.landing-to-prod-primary-vpn.google_compute_router_interface.router_interface["0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.66/30"
      + name                = "vpn-to-prod-ue1-0"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "landing-vpn-ue1"
      + vpn_tunnel          = "vpn-to-prod-ue1-0"
    }

  # module.landing-to-prod-primary-vpn.google_compute_router_interface.router_interface["1"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.70/30"
      + name                = "vpn-to-prod-ue1-1"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "landing-vpn-ue1"
      + vpn_tunnel          = "vpn-to-prod-ue1-1"
    }

  # module.landing-to-prod-primary-vpn.google_compute_router_peer.bgp_peer["0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-prod-ue1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-prod-ue1-0"
      + peer_asn                  = 64514
      + peer_ip_address           = "169.254.0.65"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-east1"
      + router                    = "landing-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-prod-primary-vpn.google_compute_router_peer.bgp_peer["1"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-prod-ue1-1"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-prod-ue1-1"
      + peer_asn                  = 64514
      + peer_ip_address           = "169.254.0.69"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-east1"
      + router                    = "landing-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-prod-primary-vpn.google_compute_vpn_tunnel.tunnels["0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-prod-ue1-0"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-landing-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "landing-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 0
    }

  # module.landing-to-prod-primary-vpn.google_compute_vpn_tunnel.tunnels["1"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-prod-ue1-1"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-landing-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "landing-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 1
    }

  # module.landing-to-prod-primary-vpn.random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.landing-to-prod-secondary-vpn.google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-prod-uw1"
      + network   = (known after apply)
      + project   = "lz-prod-net-landing-0"
      + region    = "us-west1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.landing-to-prod-secondary-vpn.google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "landing-vpn-uw1"
      + network            = (known after apply)
      + project            = "lz-prod-net-landing-0"
      + region             = "us-west1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + advertised_groups  = []
          + asn                = 64512
          + keepalive_interval = 20
        }
    }

  # module.landing-to-prod-secondary-vpn.google_compute_router_interface.router_interface["0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.98/30"
      + name                = "vpn-to-prod-uw1-0"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-west1"
      + router              = "landing-vpn-uw1"
      + vpn_tunnel          = "vpn-to-prod-uw1-0"
    }

  # module.landing-to-prod-secondary-vpn.google_compute_router_interface.router_interface["1"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.102/30"
      + name                = "vpn-to-prod-uw1-1"
      + project             = "lz-prod-net-landing-0"
      + redundant_interface = (known after apply)
      + region              = "us-west1"
      + router              = "landing-vpn-uw1"
      + vpn_tunnel          = "vpn-to-prod-uw1-1"
    }

  # module.landing-to-prod-secondary-vpn.google_compute_router_peer.bgp_peer["0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-prod-uw1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-prod-uw1-0"
      + peer_asn                  = 64514
      + peer_ip_address           = "169.254.0.97"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-west1"
      + router                    = "landing-vpn-uw1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-prod-secondary-vpn.google_compute_router_peer.bgp_peer["1"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-prod-uw1-1"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-prod-uw1-1"
      + peer_asn                  = 64514
      + peer_ip_address           = "169.254.0.101"
      + project                   = "lz-prod-net-landing-0"
      + region                    = "us-west1"
      + router                    = "landing-vpn-uw1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.landing-to-prod-secondary-vpn.google_compute_vpn_tunnel.tunnels["0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-prod-uw1-0"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-landing-0"
      + region                  = "us-west1"
      + remote_traffic_selector = (known after apply)
      + router                  = "landing-vpn-uw1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 0
    }

  # module.landing-to-prod-secondary-vpn.google_compute_vpn_tunnel.tunnels["1"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-prod-uw1-1"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-landing-0"
      + region                  = "us-west1"
      + remote_traffic_selector = (known after apply)
      + router                  = "landing-vpn-uw1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 1
    }

  # module.landing-to-prod-secondary-vpn.random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.landing-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks         = false
      + delete_default_routes_on_create = false
      + description                     = "Terraform-managed."
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + internal_ipv6_range             = (known after apply)
      + mtu                             = 1500
      + name                            = "prod-landing-0"
      + project                         = "lz-prod-net-landing-0"
      + routing_mode                    = "GLOBAL"
      + self_link                       = (known after apply)
    }

  # module.landing-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + description            = "Terraform-managed."
      + dest_range             = "199.36.153.8/30"
      + id                     = (known after apply)
      + name                   = "prod-landing-0-private-googleapis"
      + network                = (known after apply)
      + next_hop_gateway       = "default-internet-gateway"
      + next_hop_instance_zone = (known after apply)
      + next_hop_ip            = (known after apply)
      + next_hop_network       = (known after apply)
      + priority               = 1000
      + project                = "lz-prod-net-landing-0"
      + self_link              = (known after apply)
    }

  # module.landing-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + description            = "Terraform-managed."
      + dest_range             = "199.36.153.4/30"
      + id                     = (known after apply)
      + name                   = "prod-landing-0-restricted-googleapis"
      + network                = (known after apply)
      + next_hop_gateway       = "default-internet-gateway"
      + next_hop_instance_zone = (known after apply)
      + next_hop_ip            = (known after apply)
      + next_hop_network       = (known after apply)
      + priority               = 1000
      + project                = "lz-prod-net-landing-0"
      + self_link              = (known after apply)
    }

  # module.landing-vpc.google_compute_subnetwork.subnetwork["us-east1/landing-default-ew1"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + description                = "Default subnet for landing"
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.0.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "landing-default-ew1"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-prod-net-landing-0"
      + purpose                    = (known after apply)
      + region                     = "us-east1"
      + secondary_ip_range         = []
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.landing-vpc.google_dns_policy.default[0] will be created
  + resource "google_dns_policy" "default" {
      + description               = "Managed by Terraform"
      + enable_inbound_forwarding = true
      + id                        = (known after apply)
      + name                      = "prod-landing-0"
      + project                   = "lz-prod-net-landing-0"

      + networks {
          + network_url = (known after apply)
        }
    }

  # module.onprem-example-dns-forwarding.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "onprem.example.com."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "example-com"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + forwarding_config {
          + target_name_servers {
              + ipv4_address = "10.0.200.3"
            }
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.packages-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "packages.cloud.google.com."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "packages-cloud"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.packages-private-zone.google_dns_record_set.cloud-static-records["A packages.cloud.google.com."] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "packages-cloud"
      + name         = "packages.cloud.google.com."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "199.36.153.8",
          + "199.36.153.9",
          + "199.36.153.10",
          + "199.36.153.11",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.packages-private-zone.google_dns_record_set.cloud-static-records["CNAME *"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "packages-cloud"
      + name         = "*.packages.cloud.google.com."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "private.googleapis.com.",
        ]
      + ttl          = 300
      + type         = "CNAME"
    }

  # module.pkgdev-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "pkg.dev."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "pkg-dev"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.pkgdev-private-zone.google_dns_record_set.cloud-static-records["A pkg.dev."] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "pkg-dev"
      + name         = "pkg.dev."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "199.36.153.8",
          + "199.36.153.9",
          + "199.36.153.10",
          + "199.36.153.11",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.pkgdev-private-zone.google_dns_record_set.cloud-static-records["CNAME *"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "pkg-dev"
      + name         = "*.pkg.dev."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "private.googleapis.com.",
        ]
      + ttl          = 300
      + type         = "CNAME"
    }

  # module.pkigoog-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "pki.goog."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "pki-goog"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.pkigoog-private-zone.google_dns_record_set.cloud-static-records["A pki.goog."] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "pki-goog"
      + name         = "pki.goog."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "199.36.153.8",
          + "199.36.153.9",
          + "199.36.153.10",
          + "199.36.153.11",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.pkigoog-private-zone.google_dns_record_set.cloud-static-records["CNAME *"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "pki-goog"
      + name         = "*.pki.goog."
      + project      = "lz-prod-net-landing-0"
      + rrdatas      = [
          + "private.googleapis.com.",
        ]
      + ttl          = 300
      + type         = "CNAME"
    }

  # module.prod-dns-private-zone.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "prod.gcp.example.com."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "prod-gcp-example-com"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-spoke-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.prod-dns-private-zone.google_dns_record_set.cloud-static-records["A localhost"] will be created
  + resource "google_dns_record_set" "cloud-static-records" {
      + id           = (known after apply)
      + managed_zone = "prod-gcp-example-com"
      + name         = "localhost.prod.gcp.example.com."
      + project      = "lz-prod-net-spoke-0"
      + rrdatas      = [
          + "127.0.0.1",
        ]
      + ttl          = 300
      + type         = "A"
    }

  # module.prod-landing-root-dns-peering.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "prod-root-dns-peering"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-spoke-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + peering_config {
          + target_network {
              + network_url = (known after apply)
            }
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.prod-reverse-10-dns-peering.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "10.in-addr.arpa."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "prod-reverse-10-dns-peering"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-spoke-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + peering_config {
          + target_network {
              + network_url = (known after apply)
            }
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

  # module.prod-spoke-cloudnat["us-east1"].google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "prod-nat-ue1-nat"
      + network            = (known after apply)
      + project            = "lz-prod-net-spoke-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + asn                = 4200001024
          + keepalive_interval = 20
        }
    }

  # module.prod-spoke-cloudnat["us-east1"].google_compute_router_nat.nat will be created
  + resource "google_compute_router_nat" "nat" {
      + enable_dynamic_port_allocation      = (known after apply)
      + enable_endpoint_independent_mapping = true
      + icmp_idle_timeout_sec               = 30
      + id                                  = (known after apply)
      + min_ports_per_vm                    = 64
      + name                                = "prod-nat-ue1"
      + nat_ip_allocate_option              = "AUTO_ONLY"
      + project                             = "lz-prod-net-spoke-0"
      + region                              = "us-east1"
      + router                              = "prod-nat-ue1-nat"
      + source_subnetwork_ip_ranges_to_nat  = "ALL_SUBNETWORKS_ALL_IP_RANGES"
      + tcp_established_idle_timeout_sec    = 1200
      + tcp_time_wait_timeout_sec           = 120
      + tcp_transitory_idle_timeout_sec     = 30
      + udp_idle_timeout_sec                = 30

      + log_config {
          + enable = true
          + filter = "ERRORS_ONLY"
        }
    }

  # module.prod-spoke-project.google_compute_shared_vpc_host_project.shared_vpc_host[0] will be created
  + resource "google_compute_shared_vpc_host_project" "shared_vpc_host" {
      + id      = (known after apply)
      + project = "lz-prod-net-spoke-0"
    }

  # module.prod-spoke-project.google_monitoring_monitored_project.primary["lz-prod-net-landing-0"] will be created
  + resource "google_monitoring_monitored_project" "primary" {
      + create_time   = (known after apply)
      + id            = (known after apply)
      + metrics_scope = "lz-prod-net-landing-0"
      + name          = "lz-prod-net-spoke-0"
    }

  # module.prod-spoke-project.google_project.project[0] will be created
  + resource "google_project" "project" {
      + auto_create_network = false
      + billing_account     = "013816-12836E-7ECD57"
      + folder_id           = "265599683988"
      + id                  = (known after apply)
      + name                = "lz-prod-net-spoke-0"
      + number              = (known after apply)
      + project_id          = "lz-prod-net-spoke-0"
      + skip_delete         = false
    }

  # module.prod-spoke-project.google_project_iam_binding.authoritative["roles/dns.admin"] will be created
  + resource "google_project_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + project = "lz-prod-net-spoke-0"
      + role    = "roles/dns.admin"
    }

  # module.prod-spoke-project.google_project_iam_member.servicenetworking[0] will be created
  + resource "google_project_iam_member" "servicenetworking" {
      + etag    = (known after apply)
      + id      = (known after apply)
      + member  = (known after apply)
      + project = "lz-prod-net-spoke-0"
      + role    = "roles/servicenetworking.serviceAgent"
    }

  # module.prod-spoke-project.google_project_service.project_services["compute.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "compute.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["container.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "container.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["dns.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "dns.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["iap.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "iap.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["networkmanagement.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "networkmanagement.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["servicenetworking.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "servicenetworking.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service.project_services["stackdriver.googleapis.com"] will be created
  + resource "google_project_service" "project_services" {
      + disable_dependent_services = false
      + disable_on_destroy         = false
      + id                         = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + service                    = "stackdriver.googleapis.com"
    }

  # module.prod-spoke-project.google_project_service_identity.servicenetworking[0] will be created
  + resource "google_project_service_identity" "servicenetworking" {
      + email   = (known after apply)
      + id      = (known after apply)
      + project = "lz-prod-net-spoke-0"
      + service = "servicenetworking.googleapis.com"
    }

  # module.prod-spoke-vpc.google_compute_network.network[0] will be created
  + resource "google_compute_network" "network" {
      + auto_create_subnetworks         = false
      + delete_default_routes_on_create = false
      + description                     = "Terraform-managed."
      + gateway_ipv4                    = (known after apply)
      + id                              = (known after apply)
      + internal_ipv6_range             = (known after apply)
      + mtu                             = 1500
      + name                            = "prod-spoke-0"
      + project                         = "lz-prod-net-spoke-0"
      + routing_mode                    = "GLOBAL"
      + self_link                       = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_route.gateway["private-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + description            = "Terraform-managed."
      + dest_range             = "199.36.153.8/30"
      + id                     = (known after apply)
      + name                   = "prod-spoke-0-private-googleapis"
      + network                = (known after apply)
      + next_hop_gateway       = "default-internet-gateway"
      + next_hop_instance_zone = (known after apply)
      + next_hop_ip            = (known after apply)
      + next_hop_network       = (known after apply)
      + priority               = 1000
      + project                = "lz-prod-net-spoke-0"
      + self_link              = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_route.gateway["restricted-googleapis"] will be created
  + resource "google_compute_route" "gateway" {
      + description            = "Terraform-managed."
      + dest_range             = "199.36.153.4/30"
      + id                     = (known after apply)
      + name                   = "prod-spoke-0-restricted-googleapis"
      + network                = (known after apply)
      + next_hop_gateway       = "default-internet-gateway"
      + next_hop_instance_zone = (known after apply)
      + next_hop_ip            = (known after apply)
      + next_hop_network       = (known after apply)
      + priority               = 1000
      + project                = "lz-prod-net-spoke-0"
      + self_link              = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_subnetwork.proxy_only["us-east1/prod-l7ilb-ue1"] will be created
  + resource "google_compute_subnetwork" "proxy_only" {
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed proxy-only subnet for Regional HTTPS or Internal HTTPS LB."
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.92.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "prod-l7ilb-ue1"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + purpose                    = "REGIONAL_MANAGED_PROXY"
      + region                     = "us-east1"
      + role                       = "ACTIVE"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_subnetwork.proxy_only["us-west1/prod-l7ilb-uw1"] will be created
  + resource "google_compute_subnetwork" "proxy_only" {
      + creation_timestamp         = (known after apply)
      + description                = "Terraform-managed proxy-only subnet for Regional HTTPS or Internal HTTPS LB."
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.93.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "prod-l7ilb-uw1"
      + network                    = (known after apply)
      + private_ip_google_access   = (known after apply)
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + purpose                    = "REGIONAL_MANAGED_PROXY"
      + region                     = "us-west1"
      + role                       = "ACTIVE"
      + secondary_ip_range         = (known after apply)
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.prod-spoke-vpc.google_compute_subnetwork.subnetwork["us-east1/prod-default-ew1"] will be created
  + resource "google_compute_subnetwork" "subnetwork" {
      + creation_timestamp         = (known after apply)
      + description                = "Default subnet for prod"
      + external_ipv6_prefix       = (known after apply)
      + fingerprint                = (known after apply)
      + gateway_address            = (known after apply)
      + id                         = (known after apply)
      + ip_cidr_range              = "10.128.64.0/24"
      + ipv6_cidr_range            = (known after apply)
      + name                       = "prod-default-ew1"
      + network                    = (known after apply)
      + private_ip_google_access   = true
      + private_ipv6_google_access = (known after apply)
      + project                    = "lz-prod-net-spoke-0"
      + purpose                    = (known after apply)
      + region                     = "us-east1"
      + secondary_ip_range         = []
      + self_link                  = (known after apply)
      + stack_type                 = (known after apply)
    }

  # module.prod-to-landing-primary-vpn.google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-landing-ue1"
      + network   = (known after apply)
      + project   = "lz-prod-net-spoke-0"
      + region    = "us-east1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.prod-to-landing-primary-vpn.google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "prod-spoke-vpn-ue1"
      + network            = (known after apply)
      + project            = "lz-prod-net-spoke-0"
      + region             = "us-east1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + advertised_groups  = []
          + asn                = 64514
          + keepalive_interval = 20
        }
    }

  # module.prod-to-landing-primary-vpn.google_compute_router_interface.router_interface["0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.65/30"
      + name                = "vpn-to-landing-ue1-0"
      + project             = "lz-prod-net-spoke-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "prod-spoke-vpn-ue1"
      + vpn_tunnel          = "vpn-to-landing-ue1-0"
    }

  # module.prod-to-landing-primary-vpn.google_compute_router_interface.router_interface["1"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.69/30"
      + name                = "vpn-to-landing-ue1-1"
      + project             = "lz-prod-net-spoke-0"
      + redundant_interface = (known after apply)
      + region              = "us-east1"
      + router              = "prod-spoke-vpn-ue1"
      + vpn_tunnel          = "vpn-to-landing-ue1-1"
    }

  # module.prod-to-landing-primary-vpn.google_compute_router_peer.bgp_peer["0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-landing-ue1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-landing-ue1-0"
      + peer_asn                  = 64512
      + peer_ip_address           = "169.254.0.66"
      + project                   = "lz-prod-net-spoke-0"
      + region                    = "us-east1"
      + router                    = "prod-spoke-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.prod-to-landing-primary-vpn.google_compute_router_peer.bgp_peer["1"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-landing-ue1-1"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-landing-ue1-1"
      + peer_asn                  = 64512
      + peer_ip_address           = "169.254.0.70"
      + project                   = "lz-prod-net-spoke-0"
      + region                    = "us-east1"
      + router                    = "prod-spoke-vpn-ue1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.prod-to-landing-primary-vpn.google_compute_vpn_tunnel.tunnels["0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-landing-ue1-0"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-spoke-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "prod-spoke-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 0
    }

  # module.prod-to-landing-primary-vpn.google_compute_vpn_tunnel.tunnels["1"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-landing-ue1-1"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-spoke-0"
      + region                  = "us-east1"
      + remote_traffic_selector = (known after apply)
      + router                  = "prod-spoke-vpn-ue1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 1
    }

  # module.prod-to-landing-primary-vpn.random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.prod-to-landing-secondary-vpn.google_compute_ha_vpn_gateway.ha_gateway[0] will be created
  + resource "google_compute_ha_vpn_gateway" "ha_gateway" {
      + id        = (known after apply)
      + name      = "vpn-to-landing-uw1"
      + network   = (known after apply)
      + project   = "lz-prod-net-spoke-0"
      + region    = "us-west1"
      + self_link = (known after apply)

      + vpn_interfaces {
          + id                      = (known after apply)
          + interconnect_attachment = (known after apply)
          + ip_address              = (known after apply)
        }
    }

  # module.prod-to-landing-secondary-vpn.google_compute_router.router[0] will be created
  + resource "google_compute_router" "router" {
      + creation_timestamp = (known after apply)
      + id                 = (known after apply)
      + name               = "prod-spoke-vpn-uw1"
      + network            = (known after apply)
      + project            = "lz-prod-net-spoke-0"
      + region             = "us-west1"
      + self_link          = (known after apply)

      + bgp {
          + advertise_mode     = "DEFAULT"
          + advertised_groups  = []
          + asn                = 64514
          + keepalive_interval = 20
        }
    }

  # module.prod-to-landing-secondary-vpn.google_compute_router_interface.router_interface["0"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.97/30"
      + name                = "vpn-to-landing-uw1-0"
      + project             = "lz-prod-net-spoke-0"
      + redundant_interface = (known after apply)
      + region              = "us-west1"
      + router              = "prod-spoke-vpn-uw1"
      + vpn_tunnel          = "vpn-to-landing-uw1-0"
    }

  # module.prod-to-landing-secondary-vpn.google_compute_router_interface.router_interface["1"] will be created
  + resource "google_compute_router_interface" "router_interface" {
      + id                  = (known after apply)
      + ip_range            = "169.254.0.101/30"
      + name                = "vpn-to-landing-uw1-1"
      + project             = "lz-prod-net-spoke-0"
      + redundant_interface = (known after apply)
      + region              = "us-west1"
      + router              = "prod-spoke-vpn-uw1"
      + vpn_tunnel          = "vpn-to-landing-uw1-1"
    }

  # module.prod-to-landing-secondary-vpn.google_compute_router_peer.bgp_peer["0"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-landing-uw1-0"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-landing-uw1-0"
      + peer_asn                  = 64512
      + peer_ip_address           = "169.254.0.98"
      + project                   = "lz-prod-net-spoke-0"
      + region                    = "us-west1"
      + router                    = "prod-spoke-vpn-uw1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.prod-to-landing-secondary-vpn.google_compute_router_peer.bgp_peer["1"] will be created
  + resource "google_compute_router_peer" "bgp_peer" {
      + advertise_mode            = "DEFAULT"
      + advertised_groups         = []
      + advertised_route_priority = 1000
      + enable                    = true
      + id                        = (known after apply)
      + interface                 = "vpn-to-landing-uw1-1"
      + ip_address                = (known after apply)
      + management_type           = (known after apply)
      + name                      = "vpn-to-landing-uw1-1"
      + peer_asn                  = 64512
      + peer_ip_address           = "169.254.0.102"
      + project                   = "lz-prod-net-spoke-0"
      + region                    = "us-west1"
      + router                    = "prod-spoke-vpn-uw1"

      + bfd {
          + min_receive_interval        = (known after apply)
          + min_transmit_interval       = (known after apply)
          + multiplier                  = (known after apply)
          + session_initialization_mode = (known after apply)
        }
    }

  # module.prod-to-landing-secondary-vpn.google_compute_vpn_tunnel.tunnels["0"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-landing-uw1-0"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-spoke-0"
      + region                  = "us-west1"
      + remote_traffic_selector = (known after apply)
      + router                  = "prod-spoke-vpn-uw1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 0
    }

  # module.prod-to-landing-secondary-vpn.google_compute_vpn_tunnel.tunnels["1"] will be created
  + resource "google_compute_vpn_tunnel" "tunnels" {
      + creation_timestamp      = (known after apply)
      + detailed_status         = (known after apply)
      + id                      = (known after apply)
      + ike_version             = 2
      + local_traffic_selector  = (known after apply)
      + name                    = "vpn-to-landing-uw1-1"
      + peer_gcp_gateway        = (known after apply)
      + peer_ip                 = (known after apply)
      + project                 = "lz-prod-net-spoke-0"
      + region                  = "us-west1"
      + remote_traffic_selector = (known after apply)
      + router                  = "prod-spoke-vpn-uw1"
      + self_link               = (known after apply)
      + shared_secret           = (sensitive value)
      + shared_secret_hash      = (known after apply)
      + tunnel_id               = (known after apply)
      + vpn_gateway             = (known after apply)
      + vpn_gateway_interface   = 1
    }

  # module.prod-to-landing-secondary-vpn.random_id.secret will be created
  + resource "random_id" "secret" {
      + b64_std     = (known after apply)
      + b64_url     = (known after apply)
      + byte_length = 8
      + dec         = (known after apply)
      + hex         = (known after apply)
      + id          = (known after apply)
    }

  # module.reverse-10-dns-forwarding.google_dns_managed_zone.non-public[0] will be created
  + resource "google_dns_managed_zone" "non-public" {
      + creation_time   = (known after apply)
      + description     = "Terraform managed."
      + dns_name        = "10.in-addr.arpa."
      + force_destroy   = false
      + id              = (known after apply)
      + managed_zone_id = (known after apply)
      + name            = "root-reverse-10"
      + name_servers    = (known after apply)
      + project         = "lz-prod-net-landing-0"
      + reverse_lookup  = false
      + visibility      = "private"

      + cloud_logging_config {
          + enable_logging = (known after apply)
        }

      + forwarding_config {
          + target_name_servers {
              + ipv4_address = "10.0.200.3"
            }
        }

      + private_visibility_config {

          + networks {
              + network_url = (known after apply)
            }
        }
    }

Plan: 165 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cloud_dns_inbound_policy = [
      + "10.128.0.2",
    ]
  + host_project_ids         = {
      + dev-spoke-0  = "lz-dev-net-spoke-0"
      + prod-landing = "lz-prod-net-landing-0"
      + prod-spoke-0 = "lz-prod-net-spoke-0"
    }
  + host_project_numbers     = {
      + dev-spoke-0  = (known after apply)
      + prod-landing = (known after apply)
      + prod-spoke-0 = (known after apply)
    }
  + shared_vpc_self_links    = {
      + dev-spoke-0  = (known after apply)
      + prod-landing = (known after apply)
      + prod-spoke-0 = (known after apply)
    }
  + tfvars                   = (sensitive value)
  + vpn_gateway_endpoints    = {
      + onprem-primary = (known after apply)
    }
