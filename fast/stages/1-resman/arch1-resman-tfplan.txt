
Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_storage_bucket_object.providers["2-networking"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "arch1-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-networking-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.providers["2-security"] will be created
  + resource "google_storage_bucket_object" "providers" {
      + bucket         = "arch1-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "providers/2-security-providers.tf"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # google_storage_bucket_object.tfvars will be created
  + resource "google_storage_bucket_object" "tfvars" {
      + bucket         = "arch1-prod-iac-core-outputs-0"
      + content        = (sensitive value)
      + content_type   = (known after apply)
      + crc32c         = (known after apply)
      + detect_md5hash = "different hash"
      + id             = (known after apply)
      + kms_key_name   = (known after apply)
      + md5hash        = (known after apply)
      + media_link     = (known after apply)
      + name           = "tfvars/1-resman.auto.tfvars.json"
      + output_name    = (known after apply)
      + self_link      = (known after apply)
      + storage_class  = (known after apply)
    }

  # module.branch-network-folder.google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time     = (known after apply)
      + display_name    = "shared-resources"
      + folder_id       = (known after apply)
      + id              = (known after apply)
      + lifecycle_state = (known after apply)
      + name            = (known after apply)
      + parent          = "organizations/119369546298"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/compute.xpnAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/compute.xpnAdmin"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/editor"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
        ]
      + role    = "roles/editor"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/iam.serviceAccountTokenCreator"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/logging.admin"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.branch-network-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.branch-network-folder.google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.branch-network-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "arch1-prod-resman-net-0"
      + project                     = "arch1-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.branch-network-gcs.google_storage_bucket_iam_binding.bindings["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "bindings" {
      + bucket  = "arch1-prod-resman-net-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.branch-network-sa.google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "arch1-prod-resman-net-0"
      + disabled     = false
      + display_name = "Terraform resman networking service account."
      + email        = (known after apply)
      + id           = (known after apply)
      + member       = (known after apply)
      + name         = (known after apply)
      + project      = "arch1-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.branch-network-sa.google_service_account_iam_binding.roles["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "roles" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.branch-network-sa.google_storage_bucket_iam_member.bucket-roles["arch1-prod-iac-core-outputs-0-roles/storage.admin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "arch1-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.admin"
    }

  # module.branch-non-prod-folder.google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time     = (known after apply)
      + display_name    = "no-prod"
      + folder_id       = (known after apply)
      + id              = (known after apply)
      + lifecycle_state = (known after apply)
      + name            = (known after apply)
      + parent          = "organizations/119369546298"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/browser"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/browser"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/compute.xpnAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/compute.xpnAdmin"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/iam.serviceAccountTokenCreator"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/logging.admin"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.branch-non-prod-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.branch-non-prod-folder.google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.branch-non-prod-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "arch1-non-prod"
      + project                     = "arch1-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.branch-non-prod-gcs.google_storage_bucket_iam_binding.bindings["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "bindings" {
      + bucket  = "arch1-non-prod"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.branch-prod-folder.google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time     = (known after apply)
      + display_name    = "prod"
      + folder_id       = (known after apply)
      + id              = (known after apply)
      + lifecycle_state = (known after apply)
      + name            = (known after apply)
      + parent          = "organizations/119369546298"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/browser"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/browser"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/compute.xpnAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/compute.xpnAdmin"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/iam.serviceAccountTokenCreator"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/logging.admin"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.branch-prod-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.branch-prod-folder.google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.branch-prod-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "arch1-prod-env"
      + project                     = "arch1-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.branch-prod-gcs.google_storage_bucket_iam_binding.bindings["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "bindings" {
      + bucket  = "arch1-prod-env"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.branch-security-folder.google_folder.folder[0] will be created
  + resource "google_folder" "folder" {
      + create_time     = (known after apply)
      + display_name    = "Security"
      + folder_id       = (known after apply)
      + id              = (known after apply)
      + lifecycle_state = (known after apply)
      + name            = (known after apply)
      + parent          = "organizations/119369546298"
    }

  # module.branch-security-folder.google_folder_iam_binding.authoritative["roles/logging.admin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/logging.admin"
    }

  # module.branch-security-folder.google_folder_iam_binding.authoritative["roles/owner"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/owner"
    }

  # module.branch-security-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.folderAdmin"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.folderAdmin"
    }

  # module.branch-security-folder.google_folder_iam_binding.authoritative["roles/resourcemanager.projectCreator"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/resourcemanager.projectCreator"
    }

  # module.branch-security-folder.google_folder_iam_binding.authoritative["roles/viewer"] will be created
  + resource "google_folder_iam_binding" "authoritative" {
      + etag    = (known after apply)
      + folder  = (known after apply)
      + id      = (known after apply)
      + members = [
          + "group:gcp-billing-admins@wetranscloud.org",
        ]
      + role    = "roles/viewer"
    }

  # module.branch-security-folder.google_tags_tag_binding.binding["context"] will be created
  + resource "google_tags_tag_binding" "binding" {
      + id        = (known after apply)
      + name      = (known after apply)
      + parent    = (known after apply)
      + tag_value = (known after apply)
    }

  # module.branch-security-gcs.google_storage_bucket.bucket will be created
  + resource "google_storage_bucket" "bucket" {
      + force_destroy               = false
      + id                          = (known after apply)
      + location                    = "US-CENTRAL1"
      + name                        = "arch1-prod-resman-sec-0"
      + project                     = "arch1-prod-iac-core-0"
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "REGIONAL"
      + uniform_bucket_level_access = true
      + url                         = (known after apply)

      + versioning {
          + enabled = true
        }

      + website {
          + main_page_suffix = (known after apply)
          + not_found_page   = (known after apply)
        }
    }

  # module.branch-security-gcs.google_storage_bucket_iam_binding.bindings["roles/storage.objectAdmin"] will be created
  + resource "google_storage_bucket_iam_binding" "bindings" {
      + bucket  = "arch1-prod-resman-sec-0"
      + etag    = (known after apply)
      + id      = (known after apply)
      + members = [
          + "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com",
        ]
      + role    = "roles/storage.objectAdmin"
    }

  # module.branch-security-sa.google_service_account.service_account[0] will be created
  + resource "google_service_account" "service_account" {
      + account_id   = "arch1-security-0"
      + disabled     = false
      + display_name = "Terraform resman security service account."
      + email        = (known after apply)
      + id           = (known after apply)
      + member       = (known after apply)
      + name         = (known after apply)
      + project      = "arch1-prod-iac-core-0"
      + unique_id    = (known after apply)
    }

  # module.branch-security-sa.google_service_account_iam_binding.roles["roles/iam.serviceAccountTokenCreator"] will be created
  + resource "google_service_account_iam_binding" "roles" {
      + etag               = (known after apply)
      + id                 = (known after apply)
      + role               = "roles/iam.serviceAccountTokenCreator"
      + service_account_id = (known after apply)
    }

  # module.branch-security-sa.google_storage_bucket_iam_member.bucket-roles["arch1-prod-iac-core-outputs-0-roles/storage.admin"] will be created
  + resource "google_storage_bucket_iam_member" "bucket-roles" {
      + bucket = "arch1-prod-iac-core-outputs-0"
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = (known after apply)
      + role   = "roles/storage.admin"
    }

  # module.organization.google_org_policy_policy.default["cloudbuild.allowedWorkerPools"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/cloudbuild.allowedWorkerPools"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {

              + values {
                  + allowed_values = [
                      + "under:organizations/119369546298",
                    ]
                }
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.disableGuestAttributesAccess"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.disableGuestAttributesAccess"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.disableNestedVirtualization"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.disableNestedVirtualization"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.disableSerialPortAccess"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.disableSerialPortAccess"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.disableVpcExternalIpv6"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.disableVpcExternalIpv6"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.requireOsLogin"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.requireOsLogin"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.restrictLoadBalancerCreationForTypes"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.restrictLoadBalancerCreationForTypes"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {

              + values {
                  + allowed_values = [
                      + "in:INTERNAL",
                    ]
                }
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.restrictProtocolForwardingCreationForTypes"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.restrictProtocolForwardingCreationForTypes"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + deny_all = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.restrictXpnProjectLienRemoval"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.restrictXpnProjectLienRemoval"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.setNewProjectDefaultToZonalDNSOnly"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.setNewProjectDefaultToZonalDNSOnly"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.skipDefaultNetworkCreation"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.skipDefaultNetworkCreation"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["compute.vmExternalIpAccess"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/compute.vmExternalIpAccess"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + deny_all = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["essentialcontacts.allowedContactDomains"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/essentialcontacts.allowedContactDomains"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + allow_all = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["iam.automaticIamGrantsForDefaultServiceAccounts"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/iam.automaticIamGrantsForDefaultServiceAccounts"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["iam.disableServiceAccountKeyCreation"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/iam.disableServiceAccountKeyCreation"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["iam.disableServiceAccountKeyUpload"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/iam.disableServiceAccountKeyUpload"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["run.allowedIngress"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/run.allowedIngress"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {

              + values {
                  + allowed_values = [
                      + "is:internal",
                    ]
                }
            }
        }
    }

  # module.organization.google_org_policy_policy.default["sql.restrictAuthorizedNetworks"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/sql.restrictAuthorizedNetworks"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["sql.restrictPublicIp"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/sql.restrictPublicIp"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["storage.publicAccessPrevention"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/storage.publicAccessPrevention"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_org_policy_policy.default["storage.uniformBucketLevelAccess"] will be created
  + resource "google_org_policy_policy" "default" {
      + id     = (known after apply)
      + name   = "organizations/119369546298/policies/storage.uniformBucketLevelAccess"
      + parent = "organizations/119369546298"

      + spec {
          + etag        = (known after apply)
          + update_time = (known after apply)

          + rules {
              + enforce = "TRUE"
            }
        }
    }

  # module.organization.google_organization_iam_member.additive["roles/accesscontextmanager.policyAdmin-serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"] will be created
  + resource "google_organization_iam_member" "additive" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "119369546298"
      + role   = "roles/accesscontextmanager.policyAdmin"
    }

  # module.organization.google_organization_iam_member.additive["roles/billing.user-serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"] will be created
  + resource "google_organization_iam_member" "additive" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "119369546298"
      + role   = "roles/billing.user"
    }

  # module.organization.google_organization_iam_member.additive["roles/billing.user-serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"] will be created
  + resource "google_organization_iam_member" "additive" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "119369546298"
      + role   = "roles/billing.user"
    }

  # module.organization.google_organization_iam_member.additive["roles/compute.orgFirewallPolicyAdmin-serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"] will be created
  + resource "google_organization_iam_member" "additive" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "119369546298"
      + role   = "roles/compute.orgFirewallPolicyAdmin"
    }

  # module.organization.google_organization_iam_member.additive["roles/compute.xpnAdmin-serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"] will be created
  + resource "google_organization_iam_member" "additive" {
      + etag   = (known after apply)
      + id     = (known after apply)
      + member = "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
      + org_id = "119369546298"
      + role   = "roles/compute.xpnAdmin"
    }

  # module.organization.google_tags_tag_key.default["context"] will be created
  + resource "google_tags_tag_key" "default" {
      + create_time     = (known after apply)
      + description     = "Resource management context."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = "organizations/119369546298"
      + short_name      = "context"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_key.default["environment"] will be created
  + resource "google_tags_tag_key" "default" {
      + create_time     = (known after apply)
      + description     = "Environment definition."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = "organizations/119369546298"
      + short_name      = "environment"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_key.default["tenant"] will be created
  + resource "google_tags_tag_key" "default" {
      + create_time     = (known after apply)
      + description     = "Organization tenant."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = "organizations/119369546298"
      + short_name      = "tenant"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["context/data"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "data"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["context/gke"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "gke"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["context/networking"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "networking"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["context/sandbox"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "sandbox"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["context/security"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "security"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["context/teams"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "teams"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["environment/development"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "development"
      + update_time     = (known after apply)
    }

  # module.organization.google_tags_tag_value.default["environment/production"] will be created
  + resource "google_tags_tag_value" "default" {
      + create_time     = (known after apply)
      + description     = "Managed by the Terraform organization module."
      + id              = (known after apply)
      + name            = (known after apply)
      + namespaced_name = (known after apply)
      + parent          = (known after apply)
      + short_name      = "production"
      + update_time     = (known after apply)
    }

Plan: 88 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + cicd_repositories = {}
  + dataplatform      = {}
  + gke_multitenant   = {}
  + networking        = {
      + folder          = (known after apply)
      + gcs_bucket      = "arch1-prod-resman-net-0"
      + service_account = "serviceAccount:arch1-prod-resman-net-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
    }
  + project_factories = {}
  + providers         = (sensitive value)
  + security          = {
      + folder          = (known after apply)
      + gcs_bucket      = "arch1-prod-resman-sec-0"
      + service_account = "serviceAccount:arch1-security-0@arch1-prod-iac-core-0.iam.gserviceaccount.com"
    }
  + tfvars            = (sensitive value)
